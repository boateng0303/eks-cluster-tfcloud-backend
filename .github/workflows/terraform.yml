name: Terraform CI/CD

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Select environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TFC_TOKEN }}

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1


      # 2Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # 3Ô∏è‚É£ Install TFSEC & Checkov
      - name: Install tfsec
        run: |
              TFSEC_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/tfsec/releases/latest \
                    | grep tag_name | cut -d '"' -f 4)
              curl -L "https://github.com/aquasecurity/tfsec/releases/download/$TFSEC_VERSION/tfsec-linux-amd64" \
                   -o /usr/local/bin/tfsec
              chmod +x /usr/local/bin/tfsec

              # Install Checkov
              python3 -m pip install --upgrade pip
              pip install checkov
          
          

      # 4Ô∏è‚É£ Set Environment Variables
      - name: Set Environment Variables
        run: |
          echo "Selected environment: ${{ github.event.inputs.env }}"
          ENV_FILE="${{ github.event.inputs.env }}.tfvars"
          echo "ENV_FILE=$ENV_FILE" >> $GITHUB_ENV

      # 5Ô∏è‚É£ Terraform Lint (terraform fmt & validate)
      - name: Terraform Lint
        run: |
          terraform fmt -check
          terraform validate

      # 6Ô∏è‚É£ Security Scanning with tfsec
      - name: Terraform Security Scan (tfsec)
        run: tfsec . || true

      # 7Ô∏è‚É£ Security Scanning with Checkov
      - name: Terraform Security Scan (Checkov)
        run: checkov -d . || true

      # 8Ô∏è‚É£ Initialize Terraform
      - name: Terraform Init
        working-directory: terraform
        run: terraform init 

    
      # # üîü Terraform Plan (Uploads to TFC)
      # - name: Terraform Plan
      #   working-directory: terraform
      #   run: terraform plan -var-file="$ENV_FILE" 

      

      - name: Trigger TFC Run
        id: tfc_run
        run: |
              env_file="${{ github.event.inputs.env }}.tfvars"
              payload=$(jq -n \
                --arg message "Triggered by GitHub Actions" \
                --arg workspace_id "YOUR_WORKSPACE_ID" \
                --arg env_file "$env_file" \
                '{
                  "data": {
                    "attributes": {
                      "is-destroy": false,
                      "message": $message,
                      "variables": [
                        { "key": "ENV_FILE", "value": $env_file, "category": "terraform" }
                      ]
                    },
                    "type": "runs",
                    "relationships": {
                      "workspace": { "data": { "type": "workspaces", "id": $workspace_id } }
                    }
                  }
                }')
              
              response=$(curl -s \
                --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
                --header "Content-Type: application/vnd.api+json" \
                --request POST \
                --data "$payload" \
                https://app.terraform.io/api/v2/runs)
              
              run_id=$(echo $response | jq -r '.data.id')
              echo "Terraform Cloud Run ID: $run_id"
              echo "run_id=$run_id" >> $GITHUB_OUTPUT



      - name: Wait for Run Status
        run: |
          run_id=${{ steps.tfc_run.outputs.run_id }}
          while true; do
            status=$(curl -s \
              --header "Authorization: Bearer ${{ secrets.TFC_TOKEN }}" \
              https://app.terraform.io/api/v2/runs/$run_id | jq -r '.data.attributes.status')
      
            echo "Current status: $status"
      
            if [[ "$status" == "planned" ]]; then
              echo "Plan ready ‚Äî waiting for manual approval in TFC UI..."
            elif [[ "$status" == "applied" ]]; then
              echo "Apply finished successfully ‚úÖ"
              break
            elif [[ "$status" == "errored" || "$status" == "canceled" ]]; then
              echo "Run failed ‚ùå"
              exit 1
            fi
            sleep 15
          done
